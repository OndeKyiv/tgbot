import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import asyncio
import nest_asyncio
import pandas as pd
import os

# –î–æ–∑–≤–æ–ª—è—î–º–æ –≤–∫–ª–∞–¥–µ–Ω—ñ event loops
nest_asyncio.apply()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ –µ–º–æ–¥–∑—ñ
logging.basicConfig(
    format='%(asctime)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–º–µ–Ω—à—É—î–º–æ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è telegram.ext
logging.getLogger('telegram.ext').setLevel(logging.WARNING)
# –ó–º–µ–Ω—à—É—î–º–æ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è telegram
logging.getLogger('telegram').setLevel(logging.ERROR)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
TOKEN = os.getenv('BOT_TOKEN')  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
EXCEL_FILE = 'users_data.xlsx'

# –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª —è–∫—â–æ –≤—ñ–Ω –Ω–µ —ñ—Å–Ω—É—î
if not os.path.exists(EXCEL_FILE):
    df = pd.DataFrame(columns=['chat_id', 'username'])  # –ü—Ä–∏–±—Ä–∞–Ω–æ 'phone' —Ç–∞ 'UsersBox'
    df.to_excel(EXCEL_FILE, index=False)

def save_user_data(chat_id, username):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Excel"""
    try:
        df = pd.read_excel(EXCEL_FILE)
        if not df[df['chat_id'] == chat_id].empty:
            return False
        
        new_data = pd.DataFrame({
            'chat_id': [chat_id],
            'username': [username]
        })
        df = pd.concat([df, new_data], ignore_index=True)
        df.drop_duplicates(subset=['chat_id'], keep='first', inplace=True)
        df.to_excel(EXCEL_FILE, index=False)
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    chat_id = update.effective_chat.id
    username = update.effective_user.username
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    save_user_data(chat_id, username)
    
    keyboard = [[InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ —É –∫–∞–Ω–∞–ª', url='https://t.me/+ctj-ly-X2MMyYTAy')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo='http://hromada.media/wp-content/uploads/2024/12/hro2.png',
        caption=(
            '‚ö°Ô∏è –ù–æ–≤–∏–Ω–∏ —Ç–∞ —ñ–Ω—Å–∞–π–¥–∏ –≤—ñ–¥ –≤–ª–∞–¥–∏ –ë—Ä–æ–≤–∞—Ä—â–∏–Ω–∏\n'
            'üí° –ì—Ä–∞—Ñ—ñ–∫–∏ –ø–æ–¥–∞—á—ñ –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è\n'
            'üëâ –î–æ–ª—É—á–∞–π—Å—è —Ç–∞ –±—É–¥—å —É –∫—É—Ä—Å—ñ\n'
        ),
        reply_markup=reply_markup
    )

async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    
    logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)
    logger.info("üî¥ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
